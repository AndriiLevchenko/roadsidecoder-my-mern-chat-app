{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\roadsidecoder-my-mern-chat-app\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/react\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"../index.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport animationData from \"../animations/typing.json\";\n\n//import UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"SingleChat\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(SingleChat, \"yNJQsvQCi34jhLZJXqwA4QezNxw=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","animationData","ChatState","jsxDEV","_jsxDEV","SingleChat","fetchAgain","setFetchAgain","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/React/roadsidecoder-my-mern-chat-app/frontend/src/components/SingleChat.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"../index.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport animationData from \"../animations/typing.json\";\r\n\r\n//import UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [socketConnected, setSocketConnected] = useState(false);\r\n    const [typing, setTyping] = useState(false);\r\n    const [istyping, setIsTyping] = useState(false);\r\n    const toast = useToast();\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n            preserveAspectRatio: \"xMidYMid slice\",\r\n        },\r\n    };\r\n    const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n        ChatState();\r\n    return (\r\n        <div>SingleChat</div>\r\n    )\r\n}\r\nexport default SingleChat\r\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,yBAAyB;AACrD,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,GAAG,EAAEC,IAAI,QAAQ,mBAAmB;AAC7C,OAAO,cAAc;AACrB,SAASC,UAAU,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,kBAAkB;AAChE,SAASC,SAAS,EAAEC,aAAa,QAAQ,sBAAsB;AAC/D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,aAAa,MAAM,2BAA2B;;AAErD;AACA,SAASC,SAAS,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,UAAU,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMqB,KAAK,GAAGzB,QAAQ,CAAC,CAAC;EAExB,MAAM0B,cAAc,GAAG;IACnBC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACdvB,aAAa,EAAEA,aAAa;IAC5BwB,gBAAgB,EAAE;MACdC,mBAAmB,EAAE;IACzB;EACJ,CAAC;EACD,MAAM;IAAEC,YAAY;IAAEC,eAAe;IAAEC,IAAI;IAAEC,YAAY;IAAEC;EAAgB,CAAC,GACxE7B,SAAS,CAAC,CAAC;EACf,oBACIE,OAAA;IAAA4B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAE7B,CAAC;AAAA5B,EAAA,CAtBKH,UAAU;EAAA,QAOET,QAAQ;AAAA;AAAAyC,EAAA,GAPpBhC,UAAU;AAuBhB,eAAeA,UAAU;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}