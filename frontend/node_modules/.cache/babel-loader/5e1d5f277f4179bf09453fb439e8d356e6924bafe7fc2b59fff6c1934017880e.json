{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\roadsidecoder-my-mern-chat-app\\\\frontend\\\\src\\\\components\\\\SingleChat.js\",\n  _s = $RefreshSig$();\nimport { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/react\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"../index.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport animationData from \"../animations/typing.json\";\n\n//import UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\"\n    }\n  };\n  const {\n    selectedChat,\n    setSelectedChat,\n    user,\n    notification,\n    setNotification\n  } = ChatState();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 35\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this), \"!!messages\" && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: getSender(user, selectedChat.users)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: selectedChat.chatName.toUpperCase()\n        }, void 0, false))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) :\n    /*#__PURE__*/\n    // to get socket.io on same page\n    _jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Click on a user to start chatting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"yNJQsvQCi34jhLZJXqwA4QezNxw=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["FormControl","Input","Box","Text","IconButton","Spinner","useToast","getSender","getSenderFull","useEffect","useState","ArrowBackIcon","animationData","ChatState","jsxDEV","_jsxDEV","Fragment","_Fragment","SingleChat","fetchAgain","setFetchAgain","_s","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","toast","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","selectedChat","setSelectedChat","user","notification","setNotification","children","fontSize","base","md","pb","px","w","fontFamily","display","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","users","chatName","toUpperCase","h","_c","$RefreshReg$"],"sources":["C:/React/roadsidecoder-my-mern-chat-app/frontend/src/components/SingleChat.js"],"sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"../index.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\n\r\nimport animationData from \"../animations/typing.json\";\r\n\r\n//import UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [socketConnected, setSocketConnected] = useState(false);\r\n    const [typing, setTyping] = useState(false);\r\n    const [istyping, setIsTyping] = useState(false);\r\n    const toast = useToast();\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n            preserveAspectRatio: \"xMidYMid slice\",\r\n        },\r\n    };\r\n    const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n        ChatState();\r\n    return (\r\n        <>\r\n            {selectedChat ? (\r\n                <>\r\n                    <Text\r\n                        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n                        pb={3}\r\n                        px={2}\r\n                        w=\"100%\"\r\n                        fontFamily=\"Work sans\"\r\n                        display=\"flex\"\r\n                        justifyContent={{ base: \"space-between\" }}\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <IconButton\r\n                            display={{ base: \"flex\", md: \"none\" }}\r\n                            icon={<ArrowBackIcon />}\r\n                            onClick={() => setSelectedChat(\"\")}\r\n                        />\r\n                        {\"!!messages\" &&\r\n                            (!selectedChat.isGroupChat ? (\r\n                                <>\r\n                                    {getSender(user, selectedChat.users)}\r\n                                    {/*<ProfileModal*/}\r\n                                    {/*    user={getSenderFull(user, selectedChat.users)}*/}\r\n                                    {/*/>*/}\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {selectedChat.chatName.toUpperCase()}\r\n                                    {/*<UpdateGroupChatModal*/}\r\n                                    {/*    fetchMessages={fetchMessages}*/}\r\n                                    {/*    fetchAgain={fetchAgain}*/}\r\n                                    {/*    setFetchAgain={setFetchAgain}*/}\r\n                                    {/*/>*/}\r\n                                </>\r\n                            ))}\r\n                    </Text>\r\n                </>\r\n            ): (\r\n                // to get socket.io on same page\r\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n                    <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n                        Click on a user to start chatting\r\n                    </Text>\r\n                </Box>\r\n            )}\r\n        </>\r\n    )\r\n}\r\nexport default SingleChat\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}