{"ast":null,"code":"/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet {\n  base64EncodeURL\n} = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\nconst getSDKVersions = require('./analytics/getSDKVersions');\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('./analytics');\nexports = module.exports;\nconst utils = module.exports;\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach(attr => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n  Object.keys(layer).forEach(attr => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw new Error('Must supply font_size for text in overlay/underlay');\n    if (!layer.font_family) throw new Error('Must supply font_family for text in overlay/underlay');\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, match => PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  if (isString(layer)) {\n    let resourceType = null;\n    let layerUrl = '';\n    let fetchLayerBegin = 'fetch:';\n    if (layer.startsWith(fetchLayerBegin)) {\n      layerUrl = layer.substring(fetchLayerBegin.length);\n    } else if (layer.indexOf(':fetch:', 0) !== -1) {\n      const parts = layer.split(':', 3);\n      resourceType = parts[0];\n      layerUrl = parts[2];\n    } else {\n      return layer;\n    }\n    layer = {\n      url: layerUrl,\n      type: 'fetch'\n    };\n    if (resourceType) {\n      layer.resource_type = resourceType;\n    }\n  }\n  if (typeof layer !== 'object') {\n    return layer;\n  }\n  let {\n    resource_type,\n    text,\n    type,\n    public_id,\n    format,\n    url: fetchUrl\n  } = layer;\n  const components = [];\n  if (!isEmpty(text) && isEmpty(resource_type)) {\n    resource_type = 'text';\n  }\n  if (!isEmpty(fetchUrl) && isEmpty(type)) {\n    type = 'fetch';\n  }\n  if (!isEmpty(public_id) && !isEmpty(format)) {\n    public_id = `${public_id}.${format}`;\n  }\n  if (isEmpty(public_id) && resource_type !== 'text' && type !== 'fetch') {\n    throw new Error('Must supply public_id for non-text overlay');\n  }\n  if (!isEmpty(resource_type) && resource_type !== 'image') {\n    components.push(resource_type);\n  }\n  if (!isEmpty(type) && type !== 'upload') {\n    components.push(type);\n  }\n  if (resource_type === 'text' || resource_type === 'subtitles') {\n    if (isEmpty(public_id) && isEmpty(text)) {\n      throw new Error('Must supply either text or public_in in overlay');\n    }\n    const textOptions = textStyle(layer);\n    if (!isEmpty(textOptions)) {\n      components.push(textOptions);\n    }\n    if (!isEmpty(public_id)) {\n      public_id = public_id.replace('/', ':');\n      components.push(public_id);\n    }\n    if (!isEmpty(text)) {\n      const variablesRegex = new RegExp(/(\\$\\([a-zA-Z]\\w+\\))/g);\n      const textDividedByVariables = text.split(variablesRegex).filter(x => x);\n      const encodedParts = textDividedByVariables.map(subText => {\n        const matches = variablesRegex[Symbol.match](subText);\n        const isVariable = matches ? matches.length > 0 : false;\n        if (isVariable) {\n          return subText;\n        }\n        return encodeCurlyBraces(encodeURIComponent(smart_escape(subText, new RegExp(/([,\\/])/g))));\n      });\n      components.push(encodedParts.join(''));\n    }\n  } else if (type === 'fetch') {\n    const encodedUrl = base64EncodeURL(fetchUrl);\n    components.push(encodedUrl);\n  } else {\n    public_id = public_id.replace('/', ':');\n    components.push(public_id);\n  }\n  return components.join(':');\n}\nfunction replaceAllSubstrings(string, search, replacement = '') {\n  return string.split(search).join(replacement);\n}\nfunction encodeCurlyBraces(input) {\n  return replaceAllSubstrings(replaceAllSubstrings(input, '(', '%28'), ')', '%29');\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required');\n  }\n  if (!options) {\n    options = {};\n  }\n  const urls = options.urls;\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: decodeURIComponent(utils.generate_transformation_string(clone(options))),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix),\n    visual_search: utils.as_safe_bool(options.visual_search),\n    on_success: options.on_success,\n    auto_transcription: options.auto_transcription,\n    auto_chaptering: utils.as_safe_bool(options.auto_chaptering)\n  };\n  return utils.updateable_resource_params(options, params);\n}\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map(innerVal => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`;\n      }).join(',');\n      return `${key}=[${values}]`;\n      // if number, convert to string\n    } else if (Number.isInteger(value)) {\n      return `${key}=${escapeMetadataValue(String(value))}`;\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\nfunction build_eager(transformations) {\n  return toArray(transformations).map(transformation => {\n    const transformationString = utils.generate_transformation_string(clone(transformation));\n    const format = transformation.format;\n    return format == null ? transformationString : `${transformationString}/${format}`;\n  }).join('|');\n}\n\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n    case headers == null:\n      return void 0;\n    case isArray(headers):\n      return headers.join(\"\\n\");\n    case isObject(headers):\n      return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n    default:\n      return headers;\n  }\n}\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(isObject(tr) ? clone(tr) : {\n      transformation: tr\n    }));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(([key, value]) => `${key}:${value}`);\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) {\n    // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach(short => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options).filter(([key, value]) => key.startsWith('$')).map(([key, value]) => {\n    delete options[key];\n    return `${key}_${normalize_expression(value)}`;\n  }).sort().concat(variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)).join(',');\n  let transformations = entries(params).filter(([key, value]) => utils.present(value)).map(([key, value]) => key + '_' + value).sort().join(',');\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n  if (options.visual_search != null) {\n    params.visual_search = options.visual_search;\n  }\n  if (options.regions != null) {\n    params.regions = JSON.stringify(options.regions);\n  }\n  const autoTranscription = options.auto_transcription;\n  if (autoTranscription != null) {\n    if (typeof autoTranscription === 'boolean') {\n      params.auto_transcription = utils.as_safe_bool(autoTranscription);\n    } else {\n      const isAutoTranscriptionObject = typeof autoTranscription === 'object' && !Array.isArray(autoTranscription);\n      if (isAutoTranscriptionObject && Object.keys(autoTranscription).includes('translate')) {\n        params.auto_transcription = JSON.stringify(autoTranscription);\n      }\n    }\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = ['api_secret', 'auth_token', 'cdn_subdomain', 'cloud_name', 'cname', 'format', 'long_url_signature', 'private_cdn', 'resource_type', 'secure', 'secure_cdn_subdomain', 'secure_distribution', 'shorten', 'sign_url', 'ssl_detected', 'type', 'url_suffix', 'use_root_path', 'version'];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\nfunction build_distribution_domain(source, options) {\n  const cloud_name = consumeOption(options, 'cloud_name', config().cloud_name);\n  if (!cloud_name) {\n    throw new Error('Must supply cloud_name in tag or in configuration');\n  }\n  let secure = consumeOption(options, 'secure', true);\n  const ssl_detected = consumeOption(options, 'ssl_detected', config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n  const private_cdn = consumeOption(options, 'private_cdn', config().private_cdn);\n  const cname = consumeOption(options, 'cname', config().cname);\n  const secure_distribution = consumeOption(options, 'secure_distribution', config().secure_distribution);\n  const cdn_subdomain = consumeOption(options, 'cdn_subdomain', config().cdn_subdomain);\n  const secure_cdn_subdomain = consumeOption(options, 'secure_cdn_subdomain', config().secure_cdn_subdomain);\n  return unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n}\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n    const signatureConfig = {};\n    if (long_url_signature) {\n      signatureConfig.algorithm = 'sha256';\n      signatureConfig.signatureLength = 32;\n    } else {\n      signatureConfig.algorithm = signature_algorithm;\n      signatureConfig.signatureLength = 8;\n    }\n    const truncated = compute_hash(to_sign + api_secret, signatureConfig.algorithm, 'base64').slice(0, signatureConfig.signatureLength).replace(/\\//g, '_').replace(/\\+/g, '-');\n    signature = `s--${truncated}--`;\n  }\n  let prefix = build_distribution_domain(public_id, options);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n  const urlAnalytics = ensureOption(options, 'urlAnalytics', ensureOption(options, 'analytics', true));\n  if (urlAnalytics === true) {\n    let {\n      sdkCode: sdkCodeDefault,\n      sdkSemver: sdkSemverDefault,\n      techVersion: techVersionDefault,\n      product: productDefault\n    } = getSDKVersions();\n    const sdkCode = ensureOption(options, 'sdkCode', ensureOption(options, 'sdk_code', sdkCodeDefault));\n    const sdkSemver = ensureOption(options, 'sdkSemver', ensureOption(options, 'sdk_semver', sdkSemverDefault));\n    const techVersion = ensureOption(options, 'techVersion', ensureOption(options, 'tech_version', techVersionDefault));\n    const product = ensureOption(options, 'product', productDefault);\n    let sdkVersions = {\n      sdkCode: sdkCode,\n      sdkSemver: sdkSemver,\n      techVersion: techVersion,\n      product: product,\n      urlAnalytics\n    };\n    let analyticsOptions = getAnalyticsOptions(Object.assign({}, options, sdkVersions));\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n  return resultUrl;\n}\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if (resource_type === 'image' && type === 'upload' || resource_type === 'images' && type == null) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if (secure_distribution == null || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if (secure_cdn_subdomain == null && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + (crc32(source) % 5 + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + (crc32(source) % 5 + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + (crc32(source) % 5 + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\nfunction base_api_url_v1_1() {\n  return base_api_url('v1_1');\n}\nfunction base_api_url_v2() {\n  return base_api_url('v2');\n}\nfunction base_api_url(api_version) {\n  if (!api_version || api_version.length === 0) {\n    throw new Error('api_version needs to be a non-empty string');\n  }\n  return (path = [], options = []) => {\n    let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n    let cloud_name = ensureOption(options, \"cloud_name\");\n    let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n    let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n    return [cloudinary, api_version, cloud_name].concat(encoded_path).join(\"/\");\n  };\n}\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url_v1_1()([resource_type, action], options);\n}\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(([k, v]) => utils.present(v)).map(([k, v]) => `${k}=${toArray(v).join(\",\")}`).sort().join(\"&\");\n  return compute_hash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction compute_hash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  const hash = crypto.createHash(signature_algorithm).update(input).digest();\n  return Buffer.from(hash).toString(encoding);\n}\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(([k, v]) => utils.present(v)).forEach(([k, v]) => {\n    filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n  });\n  return filtered_hash;\n}\nfunction sort_object_by_key(object) {\n  return Object.keys(object).sort().reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\nfunction merge(hash1, hash2) {\n  return {\n    ...hash1,\n    ...hash2\n  };\n}\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return compute_hash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\nfunction process_request_params(params, options) {\n  if (options.unsigned != null && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n  return params;\n}\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url_v1()(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {\n    ...params,\n    mode: \"download\"\n  };\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }));\n  return api_download_url(\"generate_archive\", params, options);\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if (callback == null && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map(name => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) {\n  // :nodoc:\n  switch (range.constructor) {\n    case String:\n      if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n        return range;\n      }\n      return range.split(\"..\");\n    case Array:\n      return [first(range), last(range)];\n    default:\n      return [null, null];\n  }\n}\nfunction norm_range_value(value) {\n  // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n    case Object:\n      {\n        let video = \"\";\n        if ('codec' in param) {\n          video = param.codec;\n          if ('profile' in param) {\n            video += \":\" + param.profile;\n            if ('level' in param) {\n              video += \":\" + param.level;\n            }\n          }\n        }\n        return video;\n      }\n    case String:\n      return param;\n    default:\n      return null;\n  }\n}\n\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\nexports.process_layer = process_layer;\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, {\n    public_id\n  }, options))];\n}\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(clone(breakpoint_settings.transformation));\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(r => ({\n      transformation: utils.generate_transformation_string(r.transformation)\n    })));\n  }\n  return params;\n}\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach(key => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url_v1 = base_api_url_v1_1;\nexports.base_api_url_v2 = base_api_url_v2;\nexports.download_backedup_asset = download_backedup_asset;\nexports.compute_hash = compute_hash;\nexports.build_distribution_domain = build_distribution_domain;\nexports.sort_object_by_key = sort_object_by_key;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});","map":{"version":3,"names":["crypto","require","querystring","urlParse","parse","compact","first","isFunction","isPlainObject","last","map","take","at","clone","extend","filter","includes","isArray","isEmpty","isNumber","isObject","isString","isUndefined","smart_escape","consumeOption","toArray","base64EncodeURL","encodeDoubleArray","config","generate_token","crc32","ensurePresenceOf","ensureOption","defaults","entries","isRemoteUrl","getSDKVersions","getAnalyticsOptions","getSDKAnalyticsSignature","exports","module","utils","VERSION","version","error","generate_auth_token","options","token_options","Object","assign","auth_token","CF_SHARED_CDN","OLD_AKAMAI_SHARED_CDN","AKAMAI_SHARED_CDN","SHARED_CDN","USER_AGENT","process","versions","node","userPlatform","getUserAgent","DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION","DEFAULT_POSTER_OPTIONS","DEFAULT_VIDEO_SOURCE_TYPES","CONDITIONAL_OPERATORS","PREDEFINED_VARS","LAYER_KEYWORD_PARAMS","TRANSFORMATION_PARAMS","SIMPLE_PARAMS","UPLOAD_PREFIX","SUPPORTED_SIGNATURE_ALGORITHMS","DEFAULT_SIGNATURE_ALGORITHM","textStyle","layer","keywords","style","text_style","keys","forEach","attr","default_value","attr_value","push","split","pop","hasOwnProperty","font_size","Error","font_family","unshift","join","normalize_expression","expression","length","match","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","v","userVariablePattern","variablesReplaceRE","process_custom_function","customFunction","function_type","encodedSource","source","process_custom_pre_function","customPreFunction","result","process_if","ifValue","process_layer","resourceType","layerUrl","fetchLayerBegin","startsWith","substring","indexOf","parts","url","type","resource_type","text","public_id","format","fetchUrl","components","textOptions","variablesRegex","textDividedByVariables","x","encodedParts","subText","matches","Symbol","isVariable","encodeCurlyBraces","encodeURIComponent","encodedUrl","replaceAllSubstrings","string","search","replacement","input","process_radius","radius","findIndex","build_multi_and_sprite_params","tagOrOptions","tag","urls","transformation","generate_transformation_string","fetch_format","timestamp","async","notification_url","build_upload_params","params","access_mode","allowed_formats","asset_folder","as_safe_bool","backup","callback","cinemagraph_analysis","colors","display_name","discard_original_filename","eager","build_eager","eager_async","eager_notification_url","eval","exif","faces","folder","filename_override","image_metadata","media_metadata","invalidate","moderation","overwrite","phash","proxy","public_id_prefix","quality_analysis","responsive_breakpoints","generate_responsive_breakpoints_string","return_delete_token","decodeURIComponent","unique_filename","upload_preset","use_filename","use_filename_as_display_name","quality_override","accessibility_analysis","use_asset_folder_as_public_id_prefix","visual_search","on_success","auto_transcription","auto_chaptering","updateable_resource_params","encode_key_value","arg","k","escapeMetadataValue","value","toString","encode_context","metadataObj","key","values","innerVal","Number","isInteger","String","transformations","transformationString","build_custom_headers","headers","t","present","responsive_width","width","height","size","has_layer","overlay","underlay","crop","angle","no_html_sizes","parseFloat","background","color","base_transformations","named_transformation","some","tr","effect","border","exec","flags","dpr","offset","start_offset","end_offset","split_range","custom_function","custom_pre_function","fps","a","ar","b","bo","c","co","e","fl","fn","h","ki","l","o","q","r","u","w","y","z","name","short","undefined","vc","process_video_params","norm_range_value","variablesParam","variables","sort","concat","raw_transformation","responsive_width_transformation","responsive","hidpi","access_control","jsonArrayParam","auto_tagging","background_removal","categorization","context","metadata","custom_coordinates","detection","face_coordinates","ocr","raw_convert","similarity_search","tags","unique_display_name","regions","JSON","stringify","autoTranscription","isAutoTranscriptionObject","Array","URL_KEYS","extractUrlParams","pickOnlyExistingValues","extractTransformationParams","patchFetchFormat","build_distribution_domain","cloud_name","secure","ssl_detected","private_cdn","cname","secure_distribution","cdn_subdomain","secure_cdn_subdomain","unsigned_url_prefix","signature","source_to_sign","force_version","long_url_signature","shorten","sign_url","api_secret","url_suffix","use_root_path","signature_algorithm","merge","preloaded","original_source","finalize_resource_type","finalize_source","to_sign","part","signatureConfig","algorithm","signatureLength","truncated","compute_hash","slice","prefix","resultUrl","path","token","urlAnalytics","sdkCode","sdkCodeDefault","sdkSemver","sdkSemverDefault","techVersion","techVersionDefault","product","productDefault","sdkVersions","analyticsOptions","sdkAnalyticsSignature","appender","video_url","video_thumbnail_url","shared_domain","subdomain","cdn_part","subdomain_part","host","base_api_url_v1_1","base_api_url","base_api_url_v2","api_version","cloudinary","encode_path","unencoded_path","encoded_path","api_url","action","random_public_id","randomBytes","signed_preloaded_image","api_sign_request","params_to_sign","encoding","hash","createHash","update","digest","Buffer","from","clear_blank","filtered_hash","sort_object_by_key","object","reduce","obj","hash1","hash2","sign_request","apiKey","apiSecret","api_key","webhook_signature","data","verifyNotificationSignature","body","valid_for","Math","round","Date","now","payload_hash","process_request_params","unsigned","oauth_token","private_download_url","attachment","expires_at","zip_download_url","hashToQuery","download_backedup_asset","asset_id","version_id","base_api_url_v1","api_download_url","download_params","mode","cloudinary_params","download_archive_url","archive_params","download_zip_url","target_format","download_folder","folder_path","prefixes","join_pair","escapeQuotes","html_attrs","attrs","CLOUDINARY_JS_CONFIG_PARAMS","cloudinary_js_config","v1_result_adapter","v1_adapter","num_pass_args","v1","args","pass_args","apply","v1_adapters","mapping","NUMBER_PATTERN","OFFSET_ANY_PATTERN","RANGE_VALUE_RE","OFFSET_ANY_PATTERN_RE","range","constructor","test","modifier","param","video","codec","profile","level","allow_missing","flatten_folders","flatten_transformations","keep_derived","fully_qualified_public_ids","public_ids","skip_transformation_name","target_public_id","target_tags","use_original_filename","create_source_tag","src","source_type","codecs","video_type","mime_type","codecs_str","build_explicit_api_params","breakpoints","j","breakpoint_settings","build_streaming_profiles_param","representations","hashToParameters","parameters","endsWith","items","escape","NOP","floor","getTime","option_consume","build_array","encode_double_array","only"],"sources":["C:/React/roadsidecoder-my-mern-chat-app/node_modules/cloudinary/lib/utils/index.js"],"sourcesContent":["/**\n * Utilities\n * @module utils\n * @borrows module:auth_token as generate_auth_token\n */\n\nconst crypto = require(\"crypto\");\nconst querystring = require(\"querystring\");\nconst urlParse = require(\"url\").parse;\n\n// Functions used internally\nconst compact = require(\"lodash/compact\");\nconst first = require(\"lodash/first\");\nconst isFunction = require(\"lodash/isFunction\");\nconst isPlainObject = require(\"lodash/isPlainObject\");\nconst last = require(\"lodash/last\");\nconst map = require(\"lodash/map\");\nconst take = require(\"lodash/take\");\nconst at = require(\"lodash/at\");\n\n// Exposed by the module\nconst clone = require(\"lodash/clone\");\nconst extend = require(\"lodash/extend\");\nconst filter = require(\"lodash/filter\");\nconst includes = require(\"lodash/includes\");\nconst isArray = require(\"lodash/isArray\");\nconst isEmpty = require(\"lodash/isEmpty\");\nconst isNumber = require(\"lodash/isNumber\");\nconst isObject = require(\"lodash/isObject\");\nconst isString = require(\"lodash/isString\");\nconst isUndefined = require(\"lodash/isUndefined\");\n\nconst smart_escape = require(\"./encoding/smart_escape\");\nconst consumeOption = require('./parsing/consumeOption');\nconst toArray = require('./parsing/toArray');\nlet {base64EncodeURL} = require('./encoding/base64EncodeURL');\nconst encodeDoubleArray = require('./encoding/encodeDoubleArray');\n\nconst config = require(\"../config\");\nconst generate_token = require(\"../auth_token\");\nconst crc32 = require('./crc32');\nconst ensurePresenceOf = require('./ensurePresenceOf');\nconst ensureOption = require('./ensureOption').defaults(config());\nconst entries = require('./entries');\nconst isRemoteUrl = require('./isRemoteUrl');\n\nconst getSDKVersions = require('./analytics/getSDKVersions');\nconst {\n  getAnalyticsOptions,\n  getSDKAnalyticsSignature\n} = require('./analytics');\n\nexports = module.exports;\nconst utils = module.exports;\n\ntry {\n  // eslint-disable-next-line global-require\n  utils.VERSION = require('../../package.json').version;\n} catch (error) {\n  utils.VERSION = '';\n}\n\nfunction generate_auth_token(options) {\n  let token_options = Object.assign({}, config().auth_token, options);\n  return generate_token(token_options);\n}\n\nexports.CF_SHARED_CDN = \"d3jpl91pxevbkh.cloudfront.net\";\nexports.OLD_AKAMAI_SHARED_CDN = \"cloudinary-a.akamaihd.net\";\nexports.AKAMAI_SHARED_CDN = \"res.cloudinary.com\";\nexports.SHARED_CDN = exports.AKAMAI_SHARED_CDN;\nexports.USER_AGENT = `CloudinaryNodeJS/${exports.VERSION} (Node ${process.versions.node})`;\n\n// Add platform information to the USER_AGENT header\n// This is intended for platform information and not individual applications!\nexports.userPlatform = \"\";\n\nfunction getUserAgent() {\n  return isEmpty(utils.userPlatform) ? `${utils.USER_AGENT}` : `${utils.userPlatform} ${utils.USER_AGENT}`;\n}\n\nconst {\n  DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION,\n  DEFAULT_POSTER_OPTIONS,\n  DEFAULT_VIDEO_SOURCE_TYPES,\n  CONDITIONAL_OPERATORS,\n  PREDEFINED_VARS,\n  LAYER_KEYWORD_PARAMS,\n  TRANSFORMATION_PARAMS,\n  SIMPLE_PARAMS,\n  UPLOAD_PREFIX,\n  SUPPORTED_SIGNATURE_ALGORITHMS,\n  DEFAULT_SIGNATURE_ALGORITHM\n} = require('./consts');\n\nfunction textStyle(layer) {\n  let keywords = [];\n  let style = \"\";\n\n  if (!isEmpty(layer.text_style)) {\n    return layer.text_style;\n  }\n  Object.keys(LAYER_KEYWORD_PARAMS).forEach((attr) => {\n    let default_value = LAYER_KEYWORD_PARAMS[attr];\n    let attr_value = layer[attr] || default_value;\n    if (attr_value !== default_value) {\n      keywords.push(attr_value);\n    }\n  });\n\n  Object.keys(layer).forEach((attr) => {\n    if (attr === \"letter_spacing\" || attr === \"line_spacing\") {\n      keywords.push(`${attr}_${layer[attr]}`);\n    }\n    if (attr === \"font_hinting\") {\n      keywords.push(`${attr.split(\"_\").pop()}_${layer[attr]}`);\n    }\n    if (attr === \"font_antialiasing\") {\n      keywords.push(`antialias_${layer[attr]}`);\n    }\n  });\n\n  if (layer.hasOwnProperty(\"font_size\" || \"font_family\") || !isEmpty(keywords)) {\n    if (!layer.font_size) throw new Error('Must supply font_size for text in overlay/underlay');\n    if (!layer.font_family) throw new Error('Must supply font_family for text in overlay/underlay');\n    keywords.unshift(layer.font_size);\n    keywords.unshift(layer.font_family);\n    style = compact(keywords).join(\"_\");\n  }\n  return style;\n}\n\n/**\n * Normalize an expression string, replace \"nice names\" with their coded values and spaces with \"_\"\n * e.g. `width > 0` => `w_lt_0`\n *\n * @param {String} expression An expression to be normalized\n * @return {Object|String} A normalized String of the input value if possible otherwise the value itself\n */\nfunction normalize_expression(expression) {\n  if (!isString(expression) || expression.length === 0 || expression.match(/^!.+!$/)) {\n    return expression;\n  }\n\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\^|\\\\+|\\\\*\";\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => CONDITIONAL_OPERATORS[match]);\n\n  // Duplicate PREDEFINED_VARS to also include :{var_name} as well as {var_name}\n  // Example:\n  // -- PREDEFINED_VARS = ['foo']\n  // -- predefinedVarsPattern = ':foo|foo'\n  // It is done like this because node 6 does not support regex lookbehind\n  const predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).map(v => `:${v}|${v}`).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n  expression = expression.replace(variablesReplaceRE, (match) => (PREDEFINED_VARS[match] || match));\n\n  return expression.replace(/[ _]+/g, '_');\n}\n\n/**\n * Parse custom_function options\n * @private\n * @param {object|*} customFunction a custom function object containing function_type and source values\n * @return {string|*} custom_function transformation string\n */\nfunction process_custom_function(customFunction) {\n  if (!isObject(customFunction)) {\n    return customFunction;\n  }\n  if (customFunction.function_type === \"remote\") {\n    const encodedSource = base64EncodeURL(customFunction.source);\n\n    return [customFunction.function_type, encodedSource].join(\":\");\n  }\n  return [customFunction.function_type, customFunction.source].join(\":\");\n}\n\n/**\n * Parse custom_pre_function options\n * @private\n * @param {object|*} customPreFunction a custom function object containing function_type and source values\n * @return {string|*} custom_pre_function transformation string\n */\nfunction process_custom_pre_function(customPreFunction) {\n  let result = process_custom_function(customPreFunction);\n  return utils.isString(result) ? `pre:${result}` : null;\n}\n\n/**\n * Parse \"if\" parameter\n * Translates the condition if provided.\n * @private\n * @return {string} \"if_\" + ifValue\n */\nfunction process_if(ifValue) {\n  return ifValue ? \"if_\" + normalize_expression(ifValue) : ifValue;\n}\n\n/**\n * Parse layer options\n * @private\n * @param {object|*} layer The layer to parse.\n * @return {string} layer transformation string\n */\nfunction process_layer(layer) {\n  if (isString(layer)) {\n    let resourceType = null;\n    let layerUrl = '';\n\n    let fetchLayerBegin = 'fetch:';\n    if (layer.startsWith(fetchLayerBegin)) {\n      layerUrl = layer.substring(fetchLayerBegin.length);\n    } else if (layer.indexOf(':fetch:', 0) !== -1) {\n      const parts = layer.split(':', 3);\n      resourceType = parts[0];\n      layerUrl = parts[2];\n    } else {\n      return layer;\n    }\n\n    layer = {\n      url: layerUrl,\n      type: 'fetch'\n    };\n\n    if (resourceType) {\n      layer.resource_type = resourceType;\n    }\n  }\n\n  if (typeof layer !== 'object') {\n    return layer;\n  }\n\n  let {\n    resource_type,\n    text,\n    type,\n    public_id,\n    format,\n    url: fetchUrl\n  } = layer;\n  const components = [];\n\n  if (!isEmpty(text) && isEmpty(resource_type)) {\n    resource_type = 'text';\n  }\n\n  if (!isEmpty(fetchUrl) && isEmpty(type)) {\n    type = 'fetch';\n  }\n\n  if (!isEmpty(public_id) && !isEmpty(format)) {\n    public_id = `${public_id}.${format}`;\n  }\n\n  if (isEmpty(public_id) && resource_type !== 'text' && type !== 'fetch') {\n    throw new Error('Must supply public_id for non-text overlay');\n  }\n\n  if (!isEmpty(resource_type) && resource_type !== 'image') {\n    components.push(resource_type);\n  }\n\n  if (!isEmpty(type) && type !== 'upload') {\n    components.push(type);\n  }\n\n  if (resource_type === 'text' || resource_type === 'subtitles') {\n    if (isEmpty(public_id) && isEmpty(text)) {\n      throw new Error('Must supply either text or public_in in overlay');\n    }\n\n    const textOptions = textStyle(layer);\n\n    if (!isEmpty(textOptions)) {\n      components.push(textOptions);\n    }\n\n    if (!isEmpty(public_id)) {\n      public_id = public_id.replace('/', ':');\n      components.push(public_id);\n    }\n\n    if (!isEmpty(text)) {\n      const variablesRegex = new RegExp(/(\\$\\([a-zA-Z]\\w+\\))/g);\n      const textDividedByVariables = text.split(variablesRegex).filter(x => x);\n      const encodedParts = textDividedByVariables.map(subText => {\n        const matches = variablesRegex[Symbol.match](subText);\n        const isVariable = matches ? matches.length > 0 : false;\n        if (isVariable) {\n          return subText;\n        }\n        return encodeCurlyBraces(encodeURIComponent(smart_escape(subText, new RegExp(/([,\\/])/g))));\n      });\n      components.push(encodedParts.join(''));\n    }\n  } else if (type === 'fetch') {\n    const encodedUrl = base64EncodeURL(fetchUrl);\n    components.push(encodedUrl);\n  } else {\n    public_id = public_id.replace('/', ':');\n    components.push(public_id);\n  }\n\n  return components.join(':');\n}\n\nfunction replaceAllSubstrings(string, search, replacement = '') {\n  return string.split(search).join(replacement);\n}\n\nfunction encodeCurlyBraces(input) {\n  return replaceAllSubstrings(replaceAllSubstrings(input, '(', '%28'), ')', '%29');\n}\n\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} radius The radius to parse\n * @return {string} radius transformation string\n */\nfunction process_radius(radius) {\n  if (!radius) {\n    return radius;\n  }\n  if (!isArray(radius)) {\n    radius = [radius];\n  }\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n  return radius.map(normalize_expression).join(':');\n}\n\nfunction build_multi_and_sprite_params(tagOrOptions, options) {\n  let tag = null;\n  if (typeof tagOrOptions === 'string') {\n    tag = tagOrOptions;\n  } else {\n    if (isEmpty(options)) {\n      options = tagOrOptions;\n    } else {\n      throw new Error('First argument must be a tag when additional options are passed');\n    }\n    tag = null;\n  }\n  if (!options && !tag) {\n    throw new Error('Either tag or urls are required')\n  }\n  if (!options) {\n    options = {}\n  }\n  const urls = options.urls\n  const transformation = generate_transformation_string(extend({}, options, {\n    fetch_format: options.format\n  }));\n  return {\n    tag,\n    transformation,\n    urls,\n    timestamp: utils.timestamp(),\n    async: options.async,\n    notification_url: options.notification_url\n  };\n}\n\nfunction build_upload_params(options) {\n  let params = {\n    access_mode: options.access_mode,\n    allowed_formats: options.allowed_formats && toArray(options.allowed_formats).join(\",\"),\n    asset_folder: options.asset_folder,\n    async: utils.as_safe_bool(options.async),\n    backup: utils.as_safe_bool(options.backup),\n    callback: options.callback,\n    cinemagraph_analysis: utils.as_safe_bool(options.cinemagraph_analysis),\n    colors: utils.as_safe_bool(options.colors),\n    display_name: options.display_name,\n    discard_original_filename: utils.as_safe_bool(options.discard_original_filename),\n    eager: utils.build_eager(options.eager),\n    eager_async: utils.as_safe_bool(options.eager_async),\n    eager_notification_url: options.eager_notification_url,\n    eval: options.eval,\n    exif: utils.as_safe_bool(options.exif),\n    faces: utils.as_safe_bool(options.faces),\n    folder: options.folder,\n    format: options.format,\n    filename_override: options.filename_override,\n    image_metadata: utils.as_safe_bool(options.image_metadata),\n    media_metadata: utils.as_safe_bool(options.media_metadata),\n    invalidate: utils.as_safe_bool(options.invalidate),\n    moderation: options.moderation,\n    notification_url: options.notification_url,\n    overwrite: utils.as_safe_bool(options.overwrite),\n    phash: utils.as_safe_bool(options.phash),\n    proxy: options.proxy,\n    public_id: options.public_id,\n    public_id_prefix: options.public_id_prefix,\n    quality_analysis: utils.as_safe_bool(options.quality_analysis),\n    responsive_breakpoints: utils.generate_responsive_breakpoints_string(options.responsive_breakpoints),\n    return_delete_token: utils.as_safe_bool(options.return_delete_token),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformation: decodeURIComponent(utils.generate_transformation_string(clone(options))),\n    type: options.type,\n    unique_filename: utils.as_safe_bool(options.unique_filename),\n    upload_preset: options.upload_preset,\n    use_filename: utils.as_safe_bool(options.use_filename),\n    use_filename_as_display_name: utils.as_safe_bool(options.use_filename_as_display_name),\n    quality_override: options.quality_override,\n    accessibility_analysis: utils.as_safe_bool(options.accessibility_analysis),\n    use_asset_folder_as_public_id_prefix: utils.as_safe_bool(options.use_asset_folder_as_public_id_prefix),\n    visual_search: utils.as_safe_bool(options.visual_search),\n    on_success: options.on_success,\n    auto_transcription: options.auto_transcription,\n    auto_chaptering: utils.as_safe_bool(options.auto_chaptering)\n  };\n\n  return utils.updateable_resource_params(options, params);\n}\n\nfunction encode_key_value(arg) {\n  if (!isObject(arg)) {\n    return arg;\n  }\n  return entries(arg).map(([k, v]) => `${k}=${v}`).join('|');\n}\n\n\n/**\n * @description Escape = and | with two backslashes \\\\\n * @param {string|number} value\n * @return {string}\n */\nfunction escapeMetadataValue(value) {\n  return value.toString().replace(/([=|])/g, '\\\\$&');\n}\n\n\n/**\n *\n * @description Encode metadata fields based on incoming value.\n *              If array, escape as color_id=[\\\"green\\\",\\\"red\\\"]\n *              If string/number, escape as in_stock_id=50\n *\n *              Joins resulting values with a pipe:\n *              in_stock_id=50|color_id=[\\\"green\\\",\\\"red\\\"]\n *\n *              = and | and escaped by default (this can't be turned off)\n *\n * @param metadataObj\n * @return {string}\n */\nfunction encode_context(metadataObj) {\n  if (!isObject(metadataObj)) {\n    return metadataObj;\n  }\n\n  return entries(metadataObj).map(([key, value]) => {\n    // if string, simply parse the value and move on\n    if (isString(value)) {\n      return `${key}=${escapeMetadataValue(value)}`;\n\n      // If array, parse each item individually\n    } else if (isArray(value)) {\n      let values = value.map((innerVal) => {\n        return `\\\"${escapeMetadataValue(innerVal)}\\\"`\n      }).join(',');\n      return `${key}=[${values}]`\n      // if number, convert to string\n    } else if (Number.isInteger(value)) {\n      return `${key}=${escapeMetadataValue(String(value))}`;\n      // if unknown, return the value as string\n    } else {\n      return value.toString();\n    }\n  }).join('|');\n}\n\nfunction build_eager(transformations) {\n  return toArray(transformations)\n    .map((transformation) => {\n      const transformationString = utils.generate_transformation_string(clone(transformation));\n      const format = transformation.format;\n      return format == null ? transformationString : `${transformationString}/${format}`;\n    }).join('|');\n}\n\n/**\n * Build the custom headers for the request\n * @private\n * @param headers\n * @return {Array<string>|object|string} An object of name and value,\n *         an array of header strings, or a string of headers\n */\nfunction build_custom_headers(headers) {\n  switch (true) {\n  case headers == null:\n    return void 0;\n  case isArray(headers):\n    return headers.join(\"\\n\");\n  case isObject(headers):\n    return entries(headers).map(([k, v]) => `${k}:${v}`).join(\"\\n\");\n  default:\n    return headers;\n  }\n}\n\nfunction generate_transformation_string(options) {\n  if (utils.isString(options)) {\n    return options;\n  }\n  if (isArray(options)) {\n    return options.map(t => utils.generate_transformation_string(clone(t))).filter(utils.present).join('/');\n  }\n\n  let responsive_width = consumeOption(options, \"responsive_width\", config().responsive_width);\n  let width = options.width;\n  let height = options.height;\n  let size = consumeOption(options, \"size\");\n  if (size) {\n    [width, height] = size.split(\"x\");\n    [options.width, options.height] = [width, height];\n  }\n  let has_layer = options.overlay || options.underlay;\n  let crop = consumeOption(options, \"crop\");\n  let angle = toArray(consumeOption(options, \"angle\")).join(\".\");\n  let no_html_sizes = has_layer || utils.present(angle) || crop === \"fit\" || crop === \"limit\" || responsive_width;\n  if (width && (width.toString().indexOf(\"auto\") === 0 || no_html_sizes || parseFloat(width) < 1)) {\n    delete options.width;\n  }\n  if (height && (no_html_sizes || parseFloat(height) < 1)) {\n    delete options.height;\n  }\n  let background = consumeOption(options, \"background\");\n  background = background && background.replace(/^#/, \"rgb:\");\n  let color = consumeOption(options, \"color\");\n  color = color && color.replace(/^#/, \"rgb:\");\n  let base_transformations = toArray(consumeOption(options, \"transformation\", []));\n  let named_transformation = [];\n  if (base_transformations.some(isObject)) {\n    base_transformations = base_transformations.map(tr => utils.generate_transformation_string(\n      isObject(tr) ? clone(tr) : {transformation: tr}\n    ));\n  } else {\n    named_transformation = base_transformations.join(\".\");\n    base_transformations = [];\n  }\n  let effect = consumeOption(options, \"effect\");\n  if (isArray(effect)) {\n    effect = effect.join(\":\");\n  } else if (isObject(effect)) {\n    effect = entries(effect).map(\n      ([key, value]) => `${key}:${value}`\n    );\n  }\n  let border = consumeOption(options, \"border\");\n  if (isObject(border)) {\n    border = `${border.width != null ? border.width : 2}px_solid_${(border.color != null ? border.color : \"black\").replace(/^#/, 'rgb:')}`;\n  } else if (/^\\d+$/.exec(border)) { // fallback to html border attributes\n    options.border = border;\n    border = void 0;\n  }\n  let flags = toArray(consumeOption(options, \"flags\")).join(\".\");\n  let dpr = consumeOption(options, \"dpr\", config().dpr);\n  if (options.offset != null) {\n    [options.start_offset, options.end_offset] = split_range(consumeOption(options, \"offset\"));\n  }\n  if (options.start_offset) {\n    options.start_offset = normalize_expression(options.start_offset);\n  }\n  if (options.end_offset) {\n    options.end_offset = normalize_expression(options.end_offset);\n  }\n  let overlay = process_layer(consumeOption(options, \"overlay\"));\n  let radius = process_radius(consumeOption(options, \"radius\"));\n  let underlay = process_layer(consumeOption(options, \"underlay\"));\n  let ifValue = process_if(consumeOption(options, \"if\"));\n  let custom_function = process_custom_function(consumeOption(options, \"custom_function\"));\n  let custom_pre_function = process_custom_pre_function(consumeOption(options, \"custom_pre_function\"));\n  let fps = consumeOption(options, 'fps');\n  if (isArray(fps)) {\n    fps = fps.join('-');\n  }\n  let params = {\n    a: normalize_expression(angle),\n    ar: normalize_expression(consumeOption(options, \"aspect_ratio\")),\n    b: background,\n    bo: border,\n    c: crop,\n    co: color,\n    dpr: normalize_expression(dpr),\n    e: normalize_expression(effect),\n    fl: flags,\n    fn: custom_function || custom_pre_function,\n    fps: fps,\n    h: normalize_expression(height),\n    ki: normalize_expression(consumeOption(options, \"keyframe_interval\")),\n    l: overlay,\n    o: normalize_expression(consumeOption(options, \"opacity\")),\n    q: normalize_expression(consumeOption(options, \"quality\")),\n    r: radius,\n    t: named_transformation,\n    u: underlay,\n    w: normalize_expression(width),\n    x: normalize_expression(consumeOption(options, \"x\")),\n    y: normalize_expression(consumeOption(options, \"y\")),\n    z: normalize_expression(consumeOption(options, \"zoom\"))\n  };\n\n  SIMPLE_PARAMS.forEach(([name, short]) => {\n    let value = consumeOption(options, name);\n    if (value !== undefined) {\n      params[short] = value;\n    }\n  });\n  if (params.vc != null) {\n    params.vc = process_video_params(params.vc);\n  }\n  [\"so\", \"eo\", \"du\"].forEach((short) => {\n    if (params[short] !== undefined) {\n      params[short] = norm_range_value(params[short]);\n    }\n  });\n\n  let variablesParam = consumeOption(options, \"variables\", []);\n  let variables = entries(options)\n    .filter(([key, value]) => key.startsWith('$'))\n    .map(([key, value]) => {\n      delete options[key];\n      return `${key}_${normalize_expression(value)}`;\n    }).sort().concat(\n      variablesParam.map(([name, value]) => `${name}_${normalize_expression(value)}`)\n    ).join(',');\n\n  let transformations = entries(params)\n    .filter(([key, value]) => utils.present(value))\n    .map(([key, value]) => key + '_' + value)\n    .sort()\n    .join(',');\n\n  let raw_transformation = consumeOption(options, 'raw_transformation');\n  transformations = compact([ifValue, variables, transformations, raw_transformation]).join(\",\");\n  base_transformations.push(transformations);\n  transformations = base_transformations;\n  if (responsive_width) {\n    let responsive_width_transformation = config().responsive_width_transformation\n      || DEFAULT_RESPONSIVE_WIDTH_TRANSFORMATION;\n\n    transformations.push(utils.generate_transformation_string(clone(responsive_width_transformation)));\n  }\n  if (String(width).startsWith(\"auto\") || responsive_width) {\n    options.responsive = true;\n  }\n  if (dpr === \"auto\") {\n    options.hidpi = true;\n  }\n  return filter(transformations, utils.present).join(\"/\");\n}\n\nfunction updateable_resource_params(options, params = {}) {\n  if (options.access_control != null) {\n    params.access_control = utils.jsonArrayParam(options.access_control);\n  }\n  if (options.auto_tagging != null) {\n    params.auto_tagging = options.auto_tagging;\n  }\n  if (options.background_removal != null) {\n    params.background_removal = options.background_removal;\n  }\n  if (options.categorization != null) {\n    params.categorization = options.categorization;\n  }\n  if (options.context != null) {\n    params.context = utils.encode_context(options.context);\n  }\n  if (options.metadata != null) {\n    params.metadata = utils.encode_context(options.metadata);\n  }\n  if (options.custom_coordinates != null) {\n    params.custom_coordinates = encodeDoubleArray(options.custom_coordinates);\n  }\n  if (options.detection != null) {\n    params.detection = options.detection;\n  }\n  if (options.face_coordinates != null) {\n    params.face_coordinates = encodeDoubleArray(options.face_coordinates);\n  }\n  if (options.headers != null) {\n    params.headers = utils.build_custom_headers(options.headers);\n  }\n  if (options.notification_url != null) {\n    params.notification_url = options.notification_url;\n  }\n  if (options.ocr != null) {\n    params.ocr = options.ocr;\n  }\n  if (options.raw_convert != null) {\n    params.raw_convert = options.raw_convert;\n  }\n  if (options.similarity_search != null) {\n    params.similarity_search = options.similarity_search;\n  }\n  if (options.tags != null) {\n    params.tags = toArray(options.tags).join(\",\");\n  }\n  if (options.quality_override != null) {\n    params.quality_override = options.quality_override;\n  }\n  if (options.asset_folder != null) {\n    params.asset_folder = options.asset_folder;\n  }\n  if (options.display_name != null) {\n    params.display_name = options.display_name;\n  }\n  if (options.unique_display_name != null) {\n    params.unique_display_name = options.unique_display_name;\n  }\n  if (options.visual_search != null) {\n    params.visual_search = options.visual_search;\n  }\n  if (options.regions != null) {\n    params.regions = JSON.stringify(options.regions);\n  }\n  const autoTranscription = options.auto_transcription;\n  if (autoTranscription != null) {\n    if (typeof autoTranscription === 'boolean') {\n      params.auto_transcription = utils.as_safe_bool(autoTranscription);\n    } else {\n      const isAutoTranscriptionObject = typeof autoTranscription === 'object' && !Array.isArray(autoTranscription);\n      if (isAutoTranscriptionObject && Object.keys(autoTranscription).includes('translate')) {\n        params.auto_transcription = JSON.stringify(autoTranscription);\n      }\n    }\n  }\n  return params;\n}\n\n/**\n * A list of keys used by the url() function.\n * @private\n */\nconst URL_KEYS = [\n  'api_secret',\n  'auth_token',\n  'cdn_subdomain',\n  'cloud_name',\n  'cname',\n  'format',\n  'long_url_signature',\n  'private_cdn',\n  'resource_type',\n  'secure',\n  'secure_cdn_subdomain',\n  'secure_distribution',\n  'shorten',\n  'sign_url',\n  'ssl_detected',\n  'type',\n  'url_suffix',\n  'use_root_path',\n  'version'\n];\n\n/**\n * Create a new object with only URL parameters\n * @param {object} options The source object\n * @return {Object} An object containing only URL parameters\n */\n\nfunction extractUrlParams(options) {\n  return pickOnlyExistingValues(options, ...URL_KEYS);\n}\n\n/**\n * Create a new object with only transformation parameters\n * @param {object} options The source object\n * @return {Object} An object containing only transformation parameters\n */\n\nfunction extractTransformationParams(options) {\n  return pickOnlyExistingValues(options, ...TRANSFORMATION_PARAMS);\n}\n\n/**\n * Handle the format parameter for fetch urls\n * @private\n * @param options url and transformation options. This argument may be changed by the function!\n */\n\nfunction patchFetchFormat(options = {}) {\n  if (options.type === \"fetch\") {\n    if (options.fetch_format == null) {\n      options.fetch_format = consumeOption(options, \"format\");\n    }\n  }\n}\n\nfunction build_distribution_domain(source, options) {\n  const cloud_name = consumeOption(options, 'cloud_name', config().cloud_name);\n  if (!cloud_name) {\n    throw new Error('Must supply cloud_name in tag or in configuration');\n  }\n\n  let secure = consumeOption(options, 'secure', true);\n  const ssl_detected = consumeOption(options, 'ssl_detected', config().ssl_detected);\n  if (secure === null) {\n    secure = ssl_detected || config().secure;\n  }\n\n  const private_cdn = consumeOption(options, 'private_cdn', config().private_cdn);\n  const cname = consumeOption(options, 'cname', config().cname);\n  const secure_distribution = consumeOption(options, 'secure_distribution', config().secure_distribution);\n  const cdn_subdomain = consumeOption(options, 'cdn_subdomain', config().cdn_subdomain);\n  const secure_cdn_subdomain = consumeOption(options, 'secure_cdn_subdomain', config().secure_cdn_subdomain);\n\n  return unsigned_url_prefix(source, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n}\n\nfunction url(public_id, options = {}) {\n  let signature, source_to_sign;\n  utils.patchFetchFormat(options);\n  let type = consumeOption(options, \"type\", null);\n  let transformation = utils.generate_transformation_string(options);\n\n  let resource_type = consumeOption(options, \"resource_type\", \"image\");\n  let version = consumeOption(options, \"version\");\n  let force_version = consumeOption(options, \"force_version\", config().force_version);\n  if (force_version == null) {\n    force_version = true;\n  }\n  let long_url_signature = !!consumeOption(options, \"long_url_signature\", config().long_url_signature);\n  let format = consumeOption(options, \"format\");\n  let shorten = consumeOption(options, \"shorten\", config().shorten);\n  let sign_url = consumeOption(options, \"sign_url\", config().sign_url);\n  let api_secret = consumeOption(options, \"api_secret\", config().api_secret);\n  let url_suffix = consumeOption(options, \"url_suffix\");\n  let use_root_path = consumeOption(options, \"use_root_path\", config().use_root_path);\n  let signature_algorithm = consumeOption(options, \"signature_algorithm\", config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM);\n  if (long_url_signature) {\n    signature_algorithm = 'sha256';\n  }\n  let auth_token = consumeOption(options, \"auth_token\");\n  if (auth_token !== false) {\n    auth_token = exports.merge(config().auth_token, auth_token);\n  }\n  let preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n  let original_source = public_id;\n  if (public_id == null) {\n    return original_source;\n  }\n  public_id = public_id.toString();\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  transformation = transformation.replace(/([^:])\\/\\//g, '$1/');\n  if (sign_url && isEmpty(auth_token)) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return (part != null) && part !== '';\n    }).join('/');\n\n    const signatureConfig = {};\n    if (long_url_signature) {\n      signatureConfig.algorithm = 'sha256';\n      signatureConfig.signatureLength = 32;\n    } else {\n      signatureConfig.algorithm = signature_algorithm;\n      signatureConfig.signatureLength = 8;\n    }\n\n    const truncated = compute_hash(to_sign + api_secret, signatureConfig.algorithm, 'base64')\n      .slice(0, signatureConfig.signatureLength)\n      .replace(/\\//g, '_')\n      .replace(/\\+/g, '-');\n    signature = `s--${truncated}--`;\n  }\n\n  let prefix = build_distribution_domain(public_id, options);\n  let resultUrl = [prefix, resource_type, type, signature, transformation, version, public_id].filter(function (part) {\n    return (part != null) && part !== '';\n  }).join('/').replace(/ /g, '%20');\n  if (sign_url && !isEmpty(auth_token)) {\n    auth_token.url = urlParse(resultUrl).path;\n    let token = generate_token(auth_token);\n    resultUrl += `?${token}`;\n  }\n\n  const urlAnalytics = ensureOption(options, 'urlAnalytics', ensureOption(options, 'analytics', true));\n\n  if (urlAnalytics === true) {\n    let {\n      sdkCode: sdkCodeDefault,\n      sdkSemver: sdkSemverDefault,\n      techVersion: techVersionDefault,\n      product: productDefault\n    } = getSDKVersions();\n    const sdkCode = ensureOption(options, 'sdkCode', ensureOption(options, 'sdk_code', sdkCodeDefault));\n    const sdkSemver = ensureOption(options, 'sdkSemver', ensureOption(options, 'sdk_semver', sdkSemverDefault));\n    const techVersion = ensureOption(options, 'techVersion', ensureOption(options, 'tech_version', techVersionDefault));\n    const product = ensureOption(options, 'product', productDefault);\n\n    let sdkVersions = {\n      sdkCode: sdkCode,\n      sdkSemver: sdkSemver,\n      techVersion: techVersion,\n      product: product,\n      urlAnalytics\n    };\n\n    let analyticsOptions = getAnalyticsOptions(\n      Object.assign({}, options, sdkVersions)\n    );\n\n    let sdkAnalyticsSignature = getSDKAnalyticsSignature(analyticsOptions);\n\n    // url might already have a '?' query param\n    let appender = '?';\n    if (resultUrl.indexOf('?') >= 0) {\n      appender = '&';\n    }\n    resultUrl = `${resultUrl}${appender}_a=${sdkAnalyticsSignature}`;\n  }\n\n  return resultUrl;\n}\n\nfunction video_url(public_id, options) {\n  options = extend({\n    resource_type: 'video'\n  }, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_source(source, format, url_suffix) {\n  let source_to_sign;\n  source = source.replace(/([^:])\\/\\//g, '$1/');\n  if (source.match(/^https?:\\//i)) {\n    source = smart_escape(source);\n    source_to_sign = source;\n  } else {\n    source = encodeURIComponent(decodeURIComponent(source)).replace(/%3A/g, \":\").replace(/%2F/g, \"/\");\n    source_to_sign = source;\n    if (url_suffix) {\n      if (url_suffix.match(/[\\.\\/]/)) {\n        throw new Error('url_suffix should not include . or /');\n      }\n      source = source + '/' + url_suffix;\n    }\n    if (format != null) {\n      source = source + '.' + format;\n      source_to_sign = source_to_sign + '.' + format;\n    }\n  }\n  return [source, source_to_sign];\n}\n\nfunction video_thumbnail_url(public_id, options) {\n  options = extend({}, DEFAULT_POSTER_OPTIONS, options);\n  return utils.url(public_id, options);\n}\n\nfunction finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten) {\n  if (type == null) {\n    type = 'upload';\n  }\n  if (url_suffix != null) {\n    if (resource_type === 'image' && type === 'upload') {\n      resource_type = \"images\";\n      type = null;\n    } else if (resource_type === 'image' && type === 'private') {\n      resource_type = 'private_images';\n      type = null;\n    } else if (resource_type === 'image' && type === 'authenticated') {\n      resource_type = 'authenticated_images';\n      type = null;\n    } else if (resource_type === 'raw' && type === 'upload') {\n      resource_type = 'files';\n      type = null;\n    } else if (resource_type === 'video' && type === 'upload') {\n      resource_type = 'videos';\n      type = null;\n    } else {\n      throw new Error(\"URL Suffix only supported for image/upload, image/private, image/authenticated, video/upload and raw/upload\");\n    }\n  }\n  if (use_root_path) {\n    if ((resource_type === 'image' && type === 'upload') || (resource_type === 'images' && (type == null))) {\n      resource_type = null;\n      type = null;\n    } else {\n      throw new Error(\"Root path only supported for image/upload\");\n    }\n  }\n  if (shorten && resource_type === 'image' && type === 'upload') {\n    resource_type = 'iu';\n    type = null;\n  }\n  return [resource_type, type];\n}\n\n// cdn_subdomain and secure_cdn_subdomain\n// 1) Customers in shared distribution (e.g. res.cloudinary.com)\n//    if cdn_domain is true uses res-[1-5].cloudinary.com for both http and https.\n//    Setting secure_cdn_subdomain to false disables this for https.\n// 2) Customers with private cdn\n//    if cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for http\n//    if secure_cdn_domain is true uses cloudname-res-[1-5].cloudinary.com for https\n//      (please contact support if you require this)\n// 3) Customers with cname\n//    if cdn_domain is true uses a[1-5].cname for http.\n//    For https, uses the same naming scheme as 1 for shared distribution and as 2 for private distribution.\n\nfunction unsigned_url_prefix(\n  source,\n  cloud_name,\n  private_cdn,\n  cdn_subdomain,\n  secure_cdn_subdomain,\n  cname,\n  secure,\n  secure_distribution\n) {\n  let prefix;\n  if (cloud_name.indexOf(\"/\") === 0) {\n    return '/res' + cloud_name;\n  }\n  let shared_domain = !private_cdn;\n  if (secure) {\n    if ((secure_distribution == null) || secure_distribution === exports.OLD_AKAMAI_SHARED_CDN) {\n      secure_distribution = private_cdn ? cloud_name + \"-res.cloudinary.com\" : exports.SHARED_CDN;\n    }\n    if (shared_domain == null) {\n      shared_domain = secure_distribution === exports.SHARED_CDN;\n    }\n    if ((secure_cdn_subdomain == null) && shared_domain) {\n      secure_cdn_subdomain = cdn_subdomain;\n    }\n    if (secure_cdn_subdomain) {\n      secure_distribution = secure_distribution.replace('res.cloudinary.com', 'res-' + ((crc32(source) % 5) + 1 + '.cloudinary.com'));\n    }\n    prefix = 'https://' + secure_distribution;\n  } else if (cname) {\n    let subdomain = cdn_subdomain ? 'a' + ((crc32(source) % 5) + 1) + '.' : '';\n    prefix = 'http://' + subdomain + cname;\n  } else {\n    let cdn_part = private_cdn ? cloud_name + '-' : '';\n    let subdomain_part = cdn_subdomain ? '-' + ((crc32(source) % 5) + 1) : '';\n    let host = [cdn_part, 'res', subdomain_part, '.cloudinary.com'].join('');\n    prefix = 'http://' + host;\n  }\n  if (shared_domain) {\n    prefix += '/' + cloud_name;\n  }\n  return prefix;\n}\n\nfunction base_api_url_v1_1() {\n  return base_api_url('v1_1');\n}\n\nfunction base_api_url_v2() {\n  return base_api_url('v2');\n}\n\nfunction base_api_url(api_version) {\n  if (!api_version || api_version.length === 0) {\n    throw new Error('api_version needs to be a non-empty string');\n  }\n\n  return (path = [], options = []) => {\n    let cloudinary = ensureOption(options, \"upload_prefix\", UPLOAD_PREFIX);\n    let cloud_name = ensureOption(options, \"cloud_name\");\n    let encode_path = unencoded_path => encodeURIComponent(unencoded_path).replace(\"'\", '%27');\n    let encoded_path = Array.isArray(path) ? path.map(encode_path) : encode_path(path);\n    return [cloudinary, api_version, cloud_name].concat(encoded_path).join(\"/\");\n  };\n}\n\nfunction api_url(action = 'upload', options = {}) {\n  let resource_type = options.resource_type || \"image\";\n  return base_api_url_v1_1()([resource_type, action], options);\n}\n\nfunction random_public_id() {\n  return crypto.randomBytes(12).toString('base64').replace(/[^a-z0-9]/g, \"\");\n}\n\nfunction signed_preloaded_image(result) {\n  return `${result.resource_type}/upload/v${result.version}/${filter([result.public_id, result.format], utils.present).join(\".\")}#${result.signature}`;\n}\n\nfunction api_sign_request(params_to_sign, api_secret) {\n  let to_sign = entries(params_to_sign).filter(\n    ([k, v]) => utils.present(v)\n  ).map(\n    ([k, v]) => `${k}=${toArray(v).join(\",\")}`\n  ).sort().join(\"&\");\n  return compute_hash(to_sign + api_secret, config().signature_algorithm || DEFAULT_SIGNATURE_ALGORITHM, 'hex');\n}\n\n/**\n * Computes hash from input string using specified algorithm.\n * @private\n * @param {string} input string which to compute hash from\n * @param {string} signature_algorithm algorithm to use for computing hash\n * @param {string} encoding type of encoding\n * @return {string} computed hash value\n */\nfunction compute_hash(input, signature_algorithm, encoding) {\n  if (!SUPPORTED_SIGNATURE_ALGORITHMS.includes(signature_algorithm)) {\n    throw new Error(`Signature algorithm ${signature_algorithm} is not supported. Supported algorithms: ${SUPPORTED_SIGNATURE_ALGORITHMS.join(', ')}`);\n  }\n  const hash = crypto.createHash(signature_algorithm).update(input).digest();\n  return Buffer.from(hash).toString(encoding);\n}\n\nfunction clear_blank(hash) {\n  let filtered_hash = {};\n  entries(hash).filter(\n    ([k, v]) => utils.present(v)\n  ).forEach(\n    ([k, v]) => {\n      filtered_hash[k] = v.filter ? v.filter(x => x) : v;\n    }\n  );\n  return filtered_hash;\n}\n\nfunction sort_object_by_key(object) {\n  return Object.keys(object).sort().reduce((obj, key) => {\n    obj[key] = object[key];\n    return obj;\n  }, {});\n}\n\nfunction merge(hash1, hash2) {\n  return {...hash1, ...hash2};\n}\n\nfunction sign_request(params, options = {}) {\n  let apiKey = ensureOption(options, 'api_key');\n  let apiSecret = ensureOption(options, 'api_secret');\n  params = exports.clear_blank(params);\n  params.signature = exports.api_sign_request(params, apiSecret);\n  params.api_key = apiKey;\n  return params;\n}\n\nfunction webhook_signature(data, timestamp, options = {}) {\n  ensurePresenceOf({\n    data,\n    timestamp\n  });\n\n  let api_secret = ensureOption(options, 'api_secret');\n  let signature_algorithm = ensureOption(options, 'signature_algorithm', DEFAULT_SIGNATURE_ALGORITHM);\n  return compute_hash(data + timestamp + api_secret, signature_algorithm, 'hex');\n}\n\n/**\n * Verifies the authenticity of a notification signature\n *\n * @param {string} body JSON of the request's body\n * @param {number} timestamp Unix timestamp in seconds. Can be retrieved from the X-Cld-Timestamp header\n * @param {string} signature Actual signature. Can be retrieved from the X-Cld-Signature header\n * @param {number} [valid_for=7200] The desired time in seconds for considering the request valid\n *\n * @return {boolean}\n */\nfunction verifyNotificationSignature(body, timestamp, signature, valid_for = 7200) {\n  // verify that signature is valid for the given timestamp\n  if (timestamp < Math.round(Date.now() / 1000) - valid_for) {\n    return false;\n  }\n  const payload_hash = utils.webhook_signature(body, timestamp, {\n    api_secret: config().api_secret,\n    signature_algorithm: config().signature_algorithm\n  });\n  return signature === payload_hash;\n}\n\nfunction process_request_params(params, options) {\n  if ((options.unsigned != null) && options.unsigned) {\n    params = exports.clear_blank(params);\n    delete params.timestamp;\n  } else if (options.oauth_token || config().oauth_token) {\n    params = exports.clear_blank(params);\n  } else if (options.signature) {\n    params = exports.clear_blank(options);\n  } else {\n    params = exports.sign_request(params, options);\n  }\n\n  return params;\n}\n\nfunction private_download_url(public_id, format, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    public_id: public_id,\n    format: format,\n    type: options.type,\n    attachment: options.attachment,\n    expires_at: options.expires_at\n  }, options);\n  return exports.api_url(\"download\", options) + \"?\" + querystring.stringify(params);\n}\n\n/**\n * Utility method that uses the deprecated ZIP download API.\n * @deprecated Replaced by {download_zip_url} that uses the more advanced and robust archive generation and download API\n */\n\nfunction zip_download_url(tag, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    tag: tag,\n    transformation: utils.generate_transformation_string(options)\n  }, options);\n  return exports.api_url(\"download_tag.zip\", options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * The returned url should allow downloading the backedup asset based on the\n * version and asset id\n * asset and version id are returned with resource(<PUBLIC_ID1>, { versions: true })\n * @param asset_id\n * @param version_id\n * @param options\n * @returns {string }\n */\nfunction download_backedup_asset(asset_id, version_id, options = {}) {\n  let params = exports.sign_request({\n    timestamp: options.timestamp || exports.timestamp(),\n    asset_id: asset_id,\n    version_id: version_id\n  }, options);\n  return exports.base_api_url_v1()(['download_backup'], options) + \"?\" + hashToQuery(params);\n}\n\n/**\n * Utility method to create a signed URL for specified resources.\n * @param action\n * @param params\n * @param options\n */\nfunction api_download_url(action, params, options) {\n  const download_params = {\n    ...params,\n    mode: \"download\"\n  }\n  let cloudinary_params = exports.sign_request(download_params, options);\n  return exports.api_url(action, options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Returns a URL that when invokes creates an archive and returns it.\n * @param {object} options\n * @param {string} [options.resource_type=\"image\"] The resource type of files to include in the archive.\n *   Must be one of :image | :video | :raw\n * @param {string} [options.type=\"upload\"] The specific file type of resources: :upload|:private|:authenticated\n * @param {string|Array} [options.tags] list of tags to include in the archive\n * @param {string|Array<string>} [options.public_ids] list of public_ids to include in the archive\n * @param {string|Array<string>} [options.prefixes]  list of prefixes of public IDs (e.g., folders).\n * @param {string|Array<string>} [options.fully_qualified_public_ids] list of fully qualified public_ids to include\n *   in the archive.\n * @param {string|Array<string>} [options.transformations]  list of transformations.\n *   The derived images of the given transformations are included in the archive. Using the string representation of\n *   multiple chained transformations as we use for the 'eager' upload parameter.\n * @param {string} [options.mode=\"create\"] return the generated archive file or to store it as a raw resource and\n *   return a JSON with URLs for accessing the archive. Possible values: :download, :create\n * @param {string} [options.target_format=\"zip\"]\n * @param {string} [options.target_public_id]  public ID of the generated raw resource.\n *   Relevant only for the create mode. If not specified, random public ID is generated.\n * @param {boolean} [options.flatten_folders=false] If true, flatten public IDs with folders to be in the root\n *   of the archive. Add numeric counter to the file name in case of a name conflict.\n * @param {boolean} [options.flatten_transformations=false] If true, and multiple transformations are given,\n *   flatten the folder structure of derived images and store the transformation details on the file name instead.\n * @param {boolean} [options.use_original_filename] Use the original file name of included images\n *   (if available) instead of the public ID.\n * @param {boolean} [options.async=false] If true, return immediately and perform archive creation in the background.\n *   Relevant only for the create mode.\n * @param {string} [options.notification_url] URL to send an HTTP post request (webhook) to when the\n *   archive creation is completed.\n * @param {string|Array<string>} [options.target_tags=] Allows assigning one or more tags to the generated archive file\n *   (for later housekeeping via the admin API).\n * @param {string} [options.keep_derived=false] keep the derived images used for generating the archive\n * @return {String} archive url\n */\nfunction download_archive_url(options = {}) {\n  const params = exports.archive_params(merge(options, {\n    mode: \"download\"\n  }))\n  return api_download_url(\"generate_archive\", params, options)\n}\n\n/**\n * Returns a URL that when invokes creates an zip archive and returns it.\n * @see download_archive_url\n */\n\nfunction download_zip_url(options = {}) {\n  return exports.download_archive_url(merge(options, {\n    target_format: \"zip\"\n  }));\n}\n\n/**\n * Creates and returns a URL that when invoked creates an archive of a folder\n * @param {string} folder_path Full path (from the root) of the folder to download\n * @param {object} options Additional options\n * @returns {string} Url for downloading an archive of a folder\n */\nfunction download_folder(folder_path, options = {}) {\n  options.resource_type = options.resource_type || \"all\";\n  options.prefixes = folder_path;\n  let cloudinary_params = exports.sign_request(exports.archive_params(merge(options, {\n    mode: \"download\"\n  })), options);\n  return exports.api_url(\"generate_archive\", options) + \"?\" + hashToQuery(cloudinary_params);\n}\n\n/**\n * Render the key/value pair as an HTML tag attribute\n * @private\n * @param {string} key\n * @param {string|boolean|number} [value]\n * @return {string} A string representing the HTML attribute\n */\nfunction join_pair(key, value) {\n  if (!value) {\n    return void 0;\n  }\n  return value === true ? key : key + \"='\" + value + \"'\";\n}\n\n/**\n * If the given value is a string, replaces single or double quotes with character entities\n * @private\n * @param {*} value The string to encode quotes in\n * @return {*} Encoded string or original value if not a string\n */\nfunction escapeQuotes(value) {\n  return isString(value) ? value.replace(/\\\"/g, '&#34;').replace(/\\'/g, '&#39;') : value;\n}\n\n/**\n *\n * @param attrs\n * @return {*}\n */\nexports.html_attrs = function html_attrs(attrs) {\n  return filter(map(attrs, function (value, key) {\n    return join_pair(key, escapeQuotes(value));\n  })).sort().join(\" \");\n};\n\nconst CLOUDINARY_JS_CONFIG_PARAMS = ['api_key', 'cloud_name', 'private_cdn', 'secure_distribution', 'cdn_subdomain'];\n\nfunction cloudinary_js_config() {\n  let params = pickOnlyExistingValues(config(), ...CLOUDINARY_JS_CONFIG_PARAMS);\n  return `<script type='text/javascript'>\\n$.cloudinary.config(${JSON.stringify(params)});\\n</script>`;\n}\n\nfunction v1_result_adapter(callback) {\n  if (callback == null) {\n    return undefined;\n  }\n  return function (result) {\n    if (result.error != null) {\n      return callback(result.error);\n    }\n    return callback(void 0, result);\n  };\n}\n\nfunction v1_adapter(name, num_pass_args, v1) {\n  return function (...args) {\n    let pass_args = take(args, num_pass_args);\n    let options = args[num_pass_args];\n    let callback = args[num_pass_args + 1];\n    if ((callback == null) && isFunction(options)) {\n      callback = options;\n      options = {};\n    }\n    callback = v1_result_adapter(callback);\n    args = pass_args.concat([callback, options]);\n    return v1[name].apply(this, args);\n  };\n}\n\nfunction v1_adapters(exports, v1, mapping) {\n  return Object.keys(mapping).map((name) => {\n    let num_pass_args = mapping[name];\n    exports[name] = v1_adapter(name, num_pass_args, v1);\n    return exports[name];\n  });\n}\n\nfunction as_safe_bool(value) {\n  if (value == null) {\n    return void 0;\n  }\n  if (value === true || value === 'true' || value === '1') {\n    value = 1;\n  }\n  if (value === false || value === 'false' || value === '0') {\n    value = 0;\n  }\n  return value;\n}\n\nconst NUMBER_PATTERN = \"([0-9]*)\\\\.([0-9]+)|([0-9]+)\";\n\nconst OFFSET_ANY_PATTERN = `(${NUMBER_PATTERN})([%pP])?`;\nconst RANGE_VALUE_RE = RegExp(`^${OFFSET_ANY_PATTERN}$`);\nconst OFFSET_ANY_PATTERN_RE = RegExp(`(${OFFSET_ANY_PATTERN})\\\\.\\\\.(${OFFSET_ANY_PATTERN})`);\n\n// Split a range into the start and end values\nfunction split_range(range) { // :nodoc:\n  switch (range.constructor) {\n  case String:\n    if (!OFFSET_ANY_PATTERN_RE.test(range)) {\n      return range;\n    }\n    return range.split(\"..\");\n  case Array:\n    return [first(range), last(range)];\n  default:\n    return [null, null];\n  }\n}\n\nfunction norm_range_value(value) { // :nodoc:\n  let offset = String(value).match(RANGE_VALUE_RE);\n  if (offset) {\n    let modifier = offset[5] ? 'p' : '';\n    value = `${offset[1] || offset[4]}${modifier}`;\n  }\n  return value;\n}\n\n/**\n * A video codec parameter can be either a String or a Hash.\n * @param {Object} param <code>vc_<codec>[ : <profile> : [<level>]]</code>\n *                       or <code>{ codec: 'h264', profile: 'basic', level: '3.1' }</code>\n * @return {String} <code><codec> : <profile> : [<level>]]</code> if a Hash was provided\n *                   or the param if a String was provided.\n *                   Returns null if param is not a Hash or String\n */\nfunction process_video_params(param) {\n  switch (param.constructor) {\n  case Object: {\n    let video = \"\";\n    if ('codec' in param) {\n      video = param.codec;\n      if ('profile' in param) {\n        video += \":\" + param.profile;\n        if ('level' in param) {\n          video += \":\" + param.level;\n        }\n      }\n    }\n    return video;\n  }\n  case String:\n    return param;\n  default:\n    return null;\n  }\n}\n\n/**\n * Returns a Hash of parameters used to create an archive\n * @private\n * @param {object} options\n * @return {object} Archive API parameters\n */\n\nfunction archive_params(options = {}) {\n  return {\n    allow_missing: exports.as_safe_bool(options.allow_missing),\n    async: exports.as_safe_bool(options.async),\n    expires_at: options.expires_at,\n    flatten_folders: exports.as_safe_bool(options.flatten_folders),\n    flatten_transformations: exports.as_safe_bool(options.flatten_transformations),\n    keep_derived: exports.as_safe_bool(options.keep_derived),\n    mode: options.mode,\n    notification_url: options.notification_url,\n    prefixes: options.prefixes && toArray(options.prefixes),\n    fully_qualified_public_ids: options.fully_qualified_public_ids && toArray(options.fully_qualified_public_ids),\n    public_ids: options.public_ids && toArray(options.public_ids),\n    skip_transformation_name: exports.as_safe_bool(options.skip_transformation_name),\n    tags: options.tags && toArray(options.tags),\n    target_format: options.target_format,\n    target_public_id: options.target_public_id,\n    target_tags: options.target_tags && toArray(options.target_tags),\n    timestamp: options.timestamp || exports.timestamp(),\n    transformations: utils.build_eager(options.transformations),\n    type: options.type,\n    use_original_filename: exports.as_safe_bool(options.use_original_filename)\n  };\n}\n\nexports.process_layer = process_layer;\n\nexports.create_source_tag = function create_source_tag(src, source_type, codecs = null) {\n  let video_type = source_type === 'ogv' ? 'ogg' : source_type;\n  let mime_type = `video/${video_type}`;\n  if (!isEmpty(codecs)) {\n    let codecs_str = isArray(codecs) ? codecs.join(', ') : codecs;\n    mime_type += `; codecs=${codecs_str}`;\n  }\n  return `<source ${utils.html_attrs({\n    src,\n    type: mime_type\n  })}>`;\n};\n\nfunction build_explicit_api_params(public_id, options = {}) {\n  return [exports.build_upload_params(extend({}, {public_id}, options))];\n}\n\nfunction generate_responsive_breakpoints_string(breakpoints) {\n  if (breakpoints == null) {\n    return null;\n  }\n  breakpoints = clone(breakpoints);\n  if (!isArray(breakpoints)) {\n    breakpoints = [breakpoints];\n  }\n  for (let j = 0; j < breakpoints.length; j++) {\n    let breakpoint_settings = breakpoints[j];\n    if (breakpoint_settings != null) {\n      if (breakpoint_settings.transformation) {\n        breakpoint_settings.transformation = utils.generate_transformation_string(\n          clone(breakpoint_settings.transformation)\n        );\n      }\n    }\n  }\n  return JSON.stringify(breakpoints);\n}\n\nfunction build_streaming_profiles_param(options = {}) {\n  let params = pickOnlyExistingValues(options, \"display_name\", \"representations\");\n  if (isArray(params.representations)) {\n    params.representations = JSON.stringify(params.representations.map(\n      r => ({\n        transformation: utils.generate_transformation_string(r.transformation)\n      })\n    ));\n  }\n  return params;\n}\n\nfunction hashToParameters(hash) {\n  return entries(hash).reduce((parameters, [key, value]) => {\n    if (isArray(value)) {\n      key = key.endsWith('[]') ? key : key + '[]';\n      const items = value.map(v => [key, v]);\n      parameters = parameters.concat(items);\n    } else {\n      parameters.push([key, value]);\n    }\n    return parameters;\n  }, []);\n}\n\n/**\n * Convert a hash of values to a URI query string.\n * Array values are spread as individual parameters.\n * @param {object} hash Key-value parameters\n * @return {string} A URI query string.\n */\nfunction hashToQuery(hash) {\n  return hashToParameters(hash).map(\n    ([key, value]) => `${querystring.escape(key)}=${querystring.escape(value)}`\n  ).join('&');\n}\n\n/**\n * Verify that the parameter `value` is defined and it's string value is not zero.\n * <br>This function should not be confused with `isEmpty()`.\n * @private\n * @param {string|number} value The value to check.\n * @return {boolean} True if the value is defined and not empty.\n */\n\nfunction present(value) {\n  return value != null && (\"\" + value).length > 0;\n}\n\n/**\n * Returns a new object with key values from source based on the keys.\n * `null` or `undefined` values are not copied.\n * @private\n * @param {object} source The object to pick values from.\n * @param {...string} keys One or more keys to copy from source.\n * @return {object} A new object with the required keys and values.\n */\n\nfunction pickOnlyExistingValues(source, ...keys) {\n  let result = {};\n  if (source) {\n    keys.forEach((key) => {\n      if (source[key] != null) {\n        result[key] = source[key];\n      }\n    });\n  }\n  return result;\n}\n\n/**\n * Returns a JSON array as String.\n * Yields the array before it is converted to JSON format\n * @private\n * @param {object|String|Array<object>} data\n * @param {function(*):*} [modifier] called with the array before the array is stringified\n * @return {String|null} a JSON array string or `null` if data is `null`\n */\n\nfunction jsonArrayParam(data, modifier) {\n  if (!data) {\n    return null;\n  }\n  if (isString(data)) {\n    data = JSON.parse(data);\n  }\n  if (!isArray(data)) {\n    data = [data];\n  }\n  if (isFunction(modifier)) {\n    data = modifier(data);\n  }\n  return JSON.stringify(data);\n}\n\n/**\n * Empty function - do nothing\n *\n */\nexports.NOP = function () {\n};\nexports.generate_auth_token = generate_auth_token;\nexports.getUserAgent = getUserAgent;\nexports.build_upload_params = build_upload_params;\nexports.build_multi_and_sprite_params = build_multi_and_sprite_params;\nexports.api_download_url = api_download_url;\nexports.timestamp = () => Math.floor(new Date().getTime() / 1000);\nexports.option_consume = consumeOption; // for backwards compatibility\nexports.build_array = toArray; // for backwards compatibility\nexports.encode_double_array = encodeDoubleArray;\nexports.encode_key_value = encode_key_value;\nexports.encode_context = encode_context;\nexports.build_eager = build_eager;\nexports.build_custom_headers = build_custom_headers;\nexports.generate_transformation_string = generate_transformation_string;\nexports.updateable_resource_params = updateable_resource_params;\nexports.extractUrlParams = extractUrlParams;\nexports.extractTransformationParams = extractTransformationParams;\nexports.patchFetchFormat = patchFetchFormat;\nexports.url = url;\nexports.video_url = video_url;\nexports.video_thumbnail_url = video_thumbnail_url;\nexports.api_url = api_url;\nexports.random_public_id = random_public_id;\nexports.signed_preloaded_image = signed_preloaded_image;\nexports.api_sign_request = api_sign_request;\nexports.clear_blank = clear_blank;\nexports.merge = merge;\nexports.sign_request = sign_request;\nexports.webhook_signature = webhook_signature;\nexports.verifyNotificationSignature = verifyNotificationSignature;\nexports.process_request_params = process_request_params;\nexports.private_download_url = private_download_url;\nexports.zip_download_url = zip_download_url;\nexports.download_archive_url = download_archive_url;\nexports.download_zip_url = download_zip_url;\nexports.cloudinary_js_config = cloudinary_js_config;\nexports.v1_adapters = v1_adapters;\nexports.as_safe_bool = as_safe_bool;\nexports.archive_params = archive_params;\nexports.build_explicit_api_params = build_explicit_api_params;\nexports.generate_responsive_breakpoints_string = generate_responsive_breakpoints_string;\nexports.build_streaming_profiles_param = build_streaming_profiles_param;\nexports.hashToParameters = hashToParameters;\nexports.present = present;\nexports.only = pickOnlyExistingValues; // for backwards compatibility\nexports.pickOnlyExistingValues = pickOnlyExistingValues;\nexports.jsonArrayParam = jsonArrayParam;\nexports.download_folder = download_folder;\nexports.base_api_url_v1 = base_api_url_v1_1;\nexports.base_api_url_v2 = base_api_url_v2;\nexports.download_backedup_asset = download_backedup_asset;\nexports.compute_hash = compute_hash;\nexports.build_distribution_domain = build_distribution_domain;\nexports.sort_object_by_key = sort_object_by_key;\n\n// was exported before, so kept for backwards compatibility\nexports.DEFAULT_POSTER_OPTIONS = DEFAULT_POSTER_OPTIONS;\nexports.DEFAULT_VIDEO_SOURCE_TYPES = DEFAULT_VIDEO_SOURCE_TYPES;\n\nObject.assign(module.exports, {\n  normalize_expression,\n  at,\n  clone,\n  extend,\n  filter,\n  includes,\n  isArray,\n  isEmpty,\n  isNumber,\n  isObject,\n  isRemoteUrl,\n  isString,\n  isUndefined,\n  keys: source => Object.keys(source),\n  ensurePresenceOf\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}